{"name": "test_homepage_search", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span andiallelmwithtext=\"14\" tuafontsizes=\"14\">...</span> is not clickable at point (546, 654). Other element would receive the click: <span andiallelmwithtext=\"14\" tuafontsizes=\"14\">...</span>\n  (Session info: chrome=116.0.5845.111)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x004F1C63+49427]\n\t(No symbol) [0x00485F51]\n\t(No symbol) [0x0038C64D]\n\t(No symbol) [0x003BDCE6]\n\t(No symbol) [0x003BC959]\n\t(No symbol) [0x003BB12B]\n\t(No symbol) [0x003BA585]\n\t(No symbol) [0x003B2E80]\n\t(No symbol) [0x003D4A1C]\n\t(No symbol) [0x003B2916]\n\t(No symbol) [0x003D4D74]\n\t(No symbol) [0x003E6F2A]\n\t(No symbol) [0x003D4816]\n\t(No symbol) [0x003B1127]\n\t(No symbol) [0x003B22AD]\n\tGetHandleVerifier [0x00747159+2496009]\n\tGetHandleVerifier [0x0078D582+2783794]\n\tGetHandleVerifier [0x007874A1+2758993]\n\tGetHandleVerifier [0x005711E0+571024]\n\t(No symbol) [0x0048F97A]\n\t(No symbol) [0x0048BD98]\n\t(No symbol) [0x0048BE7B]\n\t(No symbol) [0x0047EAA7]\n\tBaseThreadInitThunk [0x771800C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77BD7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77BD7AEE+238]", "trace": "self = <test_main.TestBuyMe testMethod=test_homepage_search>\n\n    def test_homepage_search(self):\n        self.homepage_search = HomePage(self.driver)\n        self.homepage_search.pick_amount()\n        self.homepage_search.pick_region()\n>       self.homepage_search.pick_category()\n\ntest_main.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\home_screen.py:21: in pick_category\n    self.click_element(By.XPATH, \"//li/span[text()='גיפט קארד למתנות ליולדת וצעצועים']\")\nbase.py:16: in click_element\n    self.find_elem(locator_type, locator_value).click()\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\project-buyme-0qCq2WCR-py3.7\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\project-buyme-0qCq2WCR-py3.7\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\project-buyme-0qCq2WCR-py3.7\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020171619FC8>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD7AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span andiallelmwithtext=\"14\" tuafontsizes=\"14\">...</span> is not clickable at point (546, 654). Other element would receive the click: <span andiallelmwithtext=\"14\" tuafontsizes=\"14\">...</span>\nE         (Session info: chrome=116.0.5845.111)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x004F1C63+49427]\nE       \t(No symbol) [0x00485F51]\nE       \t(No symbol) [0x0038C64D]\nE       \t(No symbol) [0x003BDCE6]\nE       \t(No symbol) [0x003BC959]\nE       \t(No symbol) [0x003BB12B]\nE       \t(No symbol) [0x003BA585]\nE       \t(No symbol) [0x003B2E80]\nE       \t(No symbol) [0x003D4A1C]\nE       \t(No symbol) [0x003B2916]\nE       \t(No symbol) [0x003D4D74]\nE       \t(No symbol) [0x003E6F2A]\nE       \t(No symbol) [0x003D4816]\nE       \t(No symbol) [0x003B1127]\nE       \t(No symbol) [0x003B22AD]\nE       \tGetHandleVerifier [0x00747159+2496009]\nE       \tGetHandleVerifier [0x0078D582+2783794]\nE       \tGetHandleVerifier [0x007874A1+2758993]\nE       \tGetHandleVerifier [0x005711E0+571024]\nE       \t(No symbol) [0x0048F97A]\nE       \t(No symbol) [0x0048BD98]\nE       \t(No symbol) [0x0048BE7B]\nE       \t(No symbol) [0x0047EAA7]\nE       \tBaseThreadInitThunk [0x771800C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BD7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BD7AEE+238]\n\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\project-buyme-0qCq2WCR-py3.7\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1693171377161, "stop": 1693171386608, "uuid": "279e41de-4364-4310-b344-2fbfd691bc93", "historyId": "783e8c671004fe3860d279b4b475044f", "testCaseId": "783e8c671004fe3860d279b4b475044f", "fullName": "test_main.TestBuyMe#test_homepage_search", "labels": [{"name": "suite", "value": "test_main"}, {"name": "subSuite", "value": "TestBuyMe"}, {"name": "host", "value": "DESKTOP-MCOV53E"}, {"name": "thread", "value": "21756-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_main"}]}